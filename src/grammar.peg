---
// Queries supported by Everything But The Search
// Copyright (C) 2023, Tony Rippy
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

import Fraction from 'fraction.js';
---

  /////////////
 // QUERIES //
/////////////

Query := HelloQuery | UnitConverter | ConversionQuery

GreetingPrefix := '^\s*' 'hello|hi|greetings|salutations'i
GreetingSuffix := '(?:\s*[,.!?]*)*$'
GreetingWithoutName := GreetingPrefix suffix=GreetingSuffix
GreetingWithName := GreetingPrefix {'\s*,\s*' | '\s+'} name='[^,.!?]+' GreetingSuffix
HelloQuery := GreetingWithName | GreetingWithoutName

UnitConverter := literal='unit\s+converter'i

ConvertXtoY := { 'what\s+(?:is|are)\s+'i | 'convert\s+'i }? quantity=Number? '\s*' fromUnit=Unit '\s+(?:in\s*to|in|to|as)\s+' toUnit=Unit '\s*\?'?
ConvertYtoX := { 'how\s+many\s+'i }? toUnit=Unit '\s+(?:per|(?:(?:is|are)\s+)?in)\s+' quantity=Number? '\s*' fromUnit=Unit '\s*\?'?

ConversionQuery := ConvertXtoY | ConvertYtoX

  ////////////////////
 // NUMERIC VALUES //
////////////////////

One := literal='one|an?'
       .value = Fraction { return new Fraction(1); }

Integer := literal='[+-]?\d+'
           .value = Fraction { return new Fraction(this.literal); }

Decimal := literal='[+-]?\d*\.\d+'
           .value = Fraction { return new Fraction(this.literal); }

Scientific := literal='[+-]?(?:\d*\.\d+|\d+)e[+-]?\d+'
              .value = Fraction { return new Fraction(parseFloat(this.literal)); }

Number := Scientific | Decimal | Integer | One


  //////////////////////////
 // UNITS OF MEASUREMENT //
//////////////////////////

// SI Prefixes

// Below are the prefixes used with SI unit of measurements.
// From: https://en.wikipedia.org/wiki/Metric_prefix
// This sectoin is useful as a template for SI units.
// Some of the prefixes are case-sensitive (e.g. 'Q' & 'q')

// Quetta := literal={'quetta'i | 'Q'} // 10^30
// Ronna := literal={'ronna'i | 'R'}   // 10^27
// Yotta := literal={'yotta'i | 'Y'}   // 10^24
// Zetta := literal={'zetta'i | 'Z'}   // 10^21
// Exa := literal='exa|E'i             // 10^18
// Peta := literal={'peta'i | 'P'}     // 10^15
// Tera := literal='tera|T'i           // 10^12
// Giga := literal='giga|G'i           // 10^9
// Mega := literal={'mega'i | 'M'}     // 10^6
// Kilo := literal='kilo|k'i           // 10^3
// Hecto := literal='hecto|h'i         // 10^2
// Deca := literal='deca|da'i          // 10^1
// 1  // SI base unit
// Deci := literal='deci|d'i           // 10^−1
// Centi := literal='centi|c'i         // 10^−2
// Milli := literal={'milli'i | 'm'}   // 10^−3
// Micro := literal='micro|μ'i         // 10^−6
// Nano := literal='nano|n'i           // 10^−9
// Pico := literal={'pico'i | 'p'}     // 10^−12
// Femto := literal='femto|f'i         // 10^−15
// Atto := literal='atto|a'i           // 10^−18
// Zepto := literal={'zepto'i | 'z'}   // 10^−21
// Yocto := literal={'yocto'i | 'y'}   // 10^−24
// Ronto := literal={'ronto'i | 'r'}   // 10^−27
// Quecto := literal={'quecto'i | 'q'} // 10^−30


// Data Storage Units

Bit := literal='bits?'i
Nibble := literal='nibbles?'i
Byte := literal={'bytes?'i | 'B'i}
Kilobyte := literal='(?:kilobytes?|KB)'i
Megabyte := literal={'megabytes?'i | 'MB'i}
Gigabyte := literal={'gigabytes?'i | 'GB'i}
Terabyte := literal={'terabytes?'i | 'TB'i}
Petabyte := literal={'petabytes?'i | 'PB'i}
Exabyte := literal={'exabytes?'i | 'EB'i}

Kibibyte := literal={'kibibytes?'i | 'KiB'i}
Mebibyte := literal={'mebibytes?'i | 'MiB'i}
Gibibyte := literal={'gibibytes?'i | 'GiB'i}
Tebibyte := literal={'tebibytes?'i | 'TiB'i}
Pebibyte := literal={'pebibytes?'i | 'PiB'i}
Exbibyte := literal={'exbibytes?'i | 'EiB'i}

DataStorageUnit := Bit | Nibble | Byte
                 | Kilobyte | Megabyte | Gigabyte | Terabyte | Petabyte | Exabyte
                 | Kibibyte | Mebibyte | Gibibyte | Tebibyte | Pebibyte | Exbibyte

// Time Units

Nanosecond := literal='nanos(?:econds?)?|ns'i
Microsecond := literal='micros(?:econds?)?|μs|us'i
Millisecond := literal='millis(?:econds?)?|ms'i
Second := literal='s(?:ec(?:ond)?s?)?'i
Minute := literal='min(?:s|utes?)?'i
Hour := literal='h|hrs?|hours?'i
Helek := literal='c?helek|חלק|c?halakim|חלקים'i

Day := literal='d|days?'i
Week := literal='w|weeks?'i
Fortnight := literal='fortnights?'i
Month := literal='months?'i
Year := literal='y|years?'i
LeapYear := literal='leap\s*years?'i
Decade := literal='decades?'i
Century := literal='centur(?:y|ies)'i
Millennium := literal='millenni(?:a|um)'i

TimeUnit := Nanosecond | Microsecond | Millisecond | Second | Minute | Hour | Helek
          | Day | Week | Fortnight | Month | Year | LeapYear | Decade | Century | Millennium

// Length Units

Inch := literal='in(?:ch(?:es)?)?'i
Foot := literal='f(?:oo)?t|feet'i
Yard := literal='yards?|yd'i
Mile := literal='mi(?:les?)'i

Quettameter := literal={'quettamet(?:er|re)s?'i | 'Q[mM]'}  // 10^30
Ronnameter := literal={'ronnamet(?:er|re)s?'i | 'R[mM]'}    // 10^27
Yottameter := literal={'yottamet(?:er|re)s?'i | 'Y[mM]'}    // 10^24
Zettameter := literal={'zettamet(?:er|re)s?'i | 'Z[mM]'}    // 10^21
Exameter := literal='examet(?:er|re)s?|E[mM]'i              // 10^18
Petameter := literal={'petamet(?:er|re)s?'i | 'P[mM]'}      // 10^15
Terameter := literal='teramet(?:er|re)s?|Tm'i               // 10^12
Gigameter := literal='gigamet(?:er|re)s?|Gm'i               // 10^9
Megameter := literal={'megamet(?:er|re)s?'i | 'M[mM]'}      // 10^6
Kilometer := literal='kilomet(?:er|re)s?|km'i               // 10^3
Hectometer := literal='hectomet(?:er|re)s?|hm'i             // 10^2
Decameter := literal='decamet(?:er|re)s?|dam'i              // 10^1
Meter := literal='m(?:et(?:er|re)s?)'i                      // 1 (base unit)
Decimeter := literal='decimet(?:er|re)s?|dm'i               // 10^-1
Centimeter := literal='centimet(?:er|re)s?|cm'i             // 10^-2
Millimeter := literal={'millimet(?:er|re)s?'i | 'mm'}       // 10^-3
Micrometer := literal='micro(?:n|met(?:er|re)s?)|μm'i       // 10^-6
Nanometer := literal='nanomet(?:er|re)s?|nm'i               // 10^-9
Picometer := literal={'picomet(?:er|re)s?'i | 'pm'}         // 10^-12
Femtometer := literal='femtomet(?:er|re)s?|fm'i             // 10^-15
Attometer := literal='attomet(?:er|re)s?|am'i               // 10^-18
Zeptometer := literal={'zeptomet(?:er|re)s?'i | 'zm'}       // 10^-21
Yoctometer := literal={'yoctomet(?:er|re)s?'i | 'ym'}       // 10^-24
Rontometer := literal={'rontomet(?:er|re)s?'i | 'rm'}       // 10^-27
Quectometer := literal={'quectomet(?:er|re)s?'i | 'qm'}     // 10^-30

Angstrom := literal='[aå]ngstr[oö]ms?|Å'i

LengthUnit := Inch | Foot | Yard | Mile | Meter
            | Decameter | Hectometer | Kilometer | Megameter | Gigameter | Terameter | Petameter | Exameter | Zettameter | Yottameter | Ronnameter | Quettameter
            | Decimeter | Centimeter | Millimeter | Micrometer | Nanometer | Picometer | Femtometer | Attometer | Zeptometer | Yoctometer | Rontometer | Quectometer
            | Angstrom


Unit := DataStorageUnit | LengthUnit | TimeUnit
