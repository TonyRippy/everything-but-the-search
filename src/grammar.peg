---
// Queries supported by Everything But The Search
// Copyright (C) 2023, Tony Rippy
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

import Fraction from 'fraction.js';
---

  /////////////
 // QUERIES //
/////////////

Query := HelloQuery | UnitConverter | ConversionQuery

GreetingPrefix := '^\s*' 'hello|hi|greetings|salutations'i
GreetingSuffix := '(?:\s*[,.!?]*)*$'
GreetingWithoutName := GreetingPrefix suffix=GreetingSuffix
GreetingWithName := GreetingPrefix {'\s*,\s*' | '\s+'} name='[^,.!?]+' GreetingSuffix
HelloQuery := GreetingWithName | GreetingWithoutName

UnitConverter := literal='unit\s+converter'i

ConvertXtoY := { 'what\s+(?:is|are)\s+'i | 'convert\s+'i }? quantity=Number? '\s*' fromUnit=Unit '\s*' { 'in\s*to' | 'in' | 'to' | 'as' } '\s+' toUnit=Unit '\s*\?'?
ConvertYtoX := { 'how many\s+'i }? toUnit=Unit '\s+' { 'per' | '(?:is\s+)?in' } '\s+'  quantity=Number? '\s*' fromUnit=Unit '\s*\?'?

ConversionQuery := ConvertXtoY | ConvertYtoX

  ////////////////////
 // NUMERIC VALUES //
////////////////////

One := literal='one|an?'
       .value = Fraction { return new Fraction(1); }

Integer := literal='[+-]?\d+'
           .value = Fraction { return new Fraction(this.literal); }

Decimal := literal='[+-]?\d*\.\d+'
           .value = Fraction { return new Fraction(this.literal); }

Scientific := literal='[+-]?(?:\d*\.\d+|\d+)e[+-]?\d+'
              .value = Fraction { return new Fraction(parseFloat(this.literal)); }

Number := Scientific | Decimal | Integer | One


  //////////////////////////
 // UNITS OF MEASUREMENT //
//////////////////////////

// Data Storage Units

Bit := literal='bits?'i
Nibble := literal='nibbles?'i
Byte := literal={'bytes?'i | 'B'i}
Kilobyte := literal={'kilobytes?' | 'KB'i}
Megabyte := literal={'megabytes?'i | 'MB'i}
Gigabyte := literal={'gigabytes?'i | 'GB'i}
Terabyte := literal={'terabytes?'i | 'TB'i}
Petabyte := literal={'petabytes?'i | 'PB'i}
Exabyte := literal={'exabytes?'i | 'EB'i}

Kibibyte := literal={'kibibytes?'i | 'KiB'i}
Mebibyte := literal={'mebibytes?'i | 'MiB'i}
Gibibyte := literal={'gibibytes?'i | 'GiB'i}
Tebibyte := literal={'tebibytes?'i | 'TiB'i}
Pebibyte := literal={'pebibytes?'i | 'PiB'i}
Exbibyte := literal={'exbibytes?'i | 'EiB'i}

DataStorageUnit := Bit | Nibble | Byte
                 | Kilobyte | Megabyte | Gigabyte | Terabyte | Petabyte | Exabyte
                 | Kibibyte | Mebibyte | Gibibyte | Tebibyte | Pebibyte | Exbibyte

// Time Units

Nanosecond := literal='nanos(?:econds?)?|ns'i
Microsecond := literal='micros(?:econds?)?|μs|us'i
Millisecond := literal='millis(?:econds?)?|ms'i
Second := literal='s(?:ec(?:ond)?s?)?'i
Minute := literal='min(?:s|utes?)?'i
Hour := literal='h|hrs?|hours?'i
Helek := literal='c?helek|חלק|halakim|חלקים'i

Day := literal='d|days?'i
Week := literal='w|weeks?'i
Fortnight := literal='fortnights?'i
Month := literal='months?'i
Year := literal='y|years?'i
LeapYear := literal='leap\s*years?'i
Decade := literal='decades?'i
Century := literal='centur(?:y|ies)'i
Millennium := literal='millenni(?:a|um)'i

TimeUnit := Nanosecond | Microsecond | Millisecond | Second | Minute | Hour | Helek
          | Day | Week | Fortnight | Month | Year | LeapYear | Decade | Century | Millennium

Unit := DataStorageUnit | TimeUnit
