---
// Queries supported by Everything But The Search
// Copyright (C) 2023, Tony Rippy
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

import Fraction from 'fraction.js';
---

  /////////////
 // QUERIES //
/////////////

Query := HelloQuery | UnitConverter | ConversionQuery

GreetingPrefix := '^\s*' 'hello|hi|greetings|salutations'i
GreetingSuffix := '(?:\s*[,.!?]*)*$'
GreetingWithoutName := GreetingPrefix suffix=GreetingSuffix
GreetingWithName := GreetingPrefix {'\s*,\s*' | '\s+'} name='[^,.!?]+' GreetingSuffix
HelloQuery := GreetingWithName | GreetingWithoutName

UnitConverter := literal='unit\s+converter'i

ConvertXtoY := { 'what\s+(?:is|are)\s+'i | 'convert\s+'i }? quantity=Number? '\s*' fromUnit=Unit '\s+(?:in\s*to|in|to|as)\s+' toUnit=Unit '\s*\?'?
ConvertYtoX := { 'how\s+many\s+'i }? toUnit=Unit '\s+(?:per|(?:(?:is|are)\s+)?in)\s+' quantity=Number? '\s*' fromUnit=Unit '\s*\?'?

ConversionQuery := ConvertXtoY | ConvertYtoX

  ////////////////////
 // NUMERIC VALUES //
////////////////////

One := literal='one|an?'
       .value = Fraction { return new Fraction(1); }

Integer := literal='[+-]?\d+'
           .value = Fraction { return new Fraction(this.literal); }

Decimal := literal='[+-]?\d*\.\d+'
           .value = Fraction { return new Fraction(this.literal); }

Scientific := literal='[+-]?(?:\d*\.\d+|\d+)e[+-]?\d+'
              .value = Fraction { return new Fraction(parseFloat(this.literal)); }

Number := Scientific | Decimal | Integer | One


  //////////////////////////
 // UNITS OF MEASUREMENT //
//////////////////////////

// NOTE ON MATCHING:
// Each individual regex uses greedy matching but everything else,
// including token matching and { sub | groups}, uses the first match
// even if a later token would be better. Some rules to follow here:
//   * Use a single regex where possible. It's both more efficient and
//     uses greedy matching.
//   * Individual unit rules should end in negative lookahead: (?!\w)
//     This prevents things like miles ("mi") from matching the start of "minute".
//     The negative lookahead cannot be added to a higher-level conversion rule
//     because it also uses first match. It will decide on "mi" before checking
//     the negative lookahead.      

// SI Prefixes

// Below are the prefixes used with SI unit of measurements.
// From: https://en.wikipedia.org/wiki/Metric_prefix
// This sectoin is useful as a template for SI units.
// Some of the prefixes are case-sensitive (e.g. 'Q' & 'q')

// Quetta := literal={'quetta'i | 'Q'} // 10^30
// Ronna := literal={'ronna'i | 'R'}   // 10^27
// Yotta := literal={'yotta'i | 'Y'}   // 10^24
// Zetta := literal={'zetta'i | 'Z'}   // 10^21
// Exa := literal='exa|E'i             // 10^18
// Peta := literal={'peta'i | 'P'}     // 10^15
// Tera := literal='tera|T'i           // 10^12
// Giga := literal='giga|G'i           // 10^9
// Mega := literal={'mega'i | 'M'}     // 10^6
// Kilo := literal='kilo|k'i           // 10^3
// Hecto := literal='hecto|h'i         // 10^2
// Deca := literal='deca|da'i          // 10^1
// 1  // SI base unit
// Deci := literal='deci|d'i           // 10^−1
// Centi := literal='centi|c'i         // 10^−2
// Milli := literal={'milli'i | 'm'}   // 10^−3
// Micro := literal='micro|μ'i         // 10^−6
// Nano := literal='nano|n'i           // 10^−9
// Pico := literal={'pico'i | 'p'}     // 10^−12
// Femto := literal='femto|f'i         // 10^−15
// Atto := literal='atto|a'i           // 10^−18
// Zepto := literal={'zepto'i | 'z'}   // 10^−21
// Yocto := literal={'yocto'i | 'y'}   // 10^−24
// Ronto := literal={'ronto'i | 'r'}   // 10^−27
// Quecto := literal={'quecto'i | 'q'} // 10^−30


// Data Storage Units

Bit := literal='bits?(?!\w)'i
Nibble := literal='nibbles?(?!\w)'i
Byte := literal='(?:bytes?|B)(?!\w)'i
Kilobyte := literal='(?:kilobytes?|KB)(?!\w)'i
Megabyte := literal='(?:megabytes?|MB)(?!\w)'i
Gigabyte := literal='(?:gigabytes?|GB)(?!\w)'i
Terabyte := literal='(?:terabytes?|TB)(?!\w)'i
Petabyte := literal='(?:petabytes?|PB)(?!\w)'i
Exabyte := literal='(?:exabytes?|EB)(?!\w)'i

Kibibyte := literal='(?:kibibytes?|KiB)(?!\w)'i
Mebibyte := literal='(?:mebibytes?|MiB)(?!\w)'i
Gibibyte := literal='(?:gibibytes?|GiB)(?!\w)'i
Tebibyte := literal='(?:tebibytes?|TiB)(?!\w)'i
Pebibyte := literal='(?:pebibytes?|PiB)(?!\w)'i
Exbibyte := literal='(?:exbibytes?|EiB)(?!\w)'i

DataStorageUnit := Bit | Nibble | Byte
                 | Kilobyte | Megabyte | Gigabyte | Terabyte | Petabyte | Exabyte
                 | Kibibyte | Mebibyte | Gibibyte | Tebibyte | Pebibyte | Exbibyte

// Time Units

Nanosecond := literal='(?:nanos(?:econds?)?|ns)(?!\w)'i
Microsecond := literal='(?:micros(?:econds?)?|μs|us)(?!\w)'i
Millisecond := literal='(?:millis(?:econds?)?|ms)(?!\w)'i
Second := literal='s(?:ec(?:ond)?s?)?(?!\w)'i
Minute := literal='min(?:s|utes?)?(?!\w)'i
Hour := literal='(?:h|hrs?|hours?)(?!\w)'i
Helek := literal='(?:c?helek|חלק|c?halakim|חלקים)(?!\w)'i

Day := literal='(?:d|days?)(?!\w)'i
Week := literal='(?:w|weeks?)(?!\w)'i
Fortnight := literal='fortnights?(?!\w)'i
Month := literal='months?(?!\w)'i
Year := literal='y(?:ears?)?(?!\w)'i
LeapYear := literal='leap\s*years?'i
Decade := literal='decades?(?!\w)'i
Century := literal='centur(?:y|ies)(?!\w)'i
Millennium := literal='millenni(?:a|um)(?!\w)'i

TimeUnit := Nanosecond | Microsecond | Millisecond | Second | Minute | Hour | Helek
          | Day | Week | Fortnight | Month | Year | LeapYear | Decade | Century | Millennium

// Length Units

Inch := literal='in(?:ch(?:es)?)?(?!\w)'i
Foot := literal='(?:f(?:oo)?t|feet)(?!\w)'i
Yard := literal='(?:yards?|yd)(?!\w)'i
Mile := literal='mi(?:les?)?(?!\w)'i

Quettameter := literal={'quettamet(?:er|re)s?'i | 'Q[mM]'} '(?!\w)' // 10^30
Ronnameter := literal={'ronnamet(?:er|re)s?'i | 'R[mM]'} '(?!\w)'  // 10^27
Yottameter := literal={'yottamet(?:er|re)s?'i | 'Y[mM]'} '(?!\w)'  // 10^24
Zettameter := literal={'zettamet(?:er|re)s?'i | 'Z[mM]'} '(?!\w)'  // 10^21
Exameter := literal='(?:examet(?:er|re)s?|E[mM])(?!\w)'i           // 10^18
Petameter := literal={'petamet(?:er|re)s?'i | 'P[mM]'} '(?!\w)'    // 10^15
Terameter := literal='(?:teramet(?:er|re)s?|Tm)(?!\w)'i            // 10^12
Gigameter := literal='(?:gigamet(?:er|re)s?|Gm)(?!\w)'i            // 10^9
Megameter := literal={'megamet(?:er|re)s?'i | 'M[mM]'} '(?!\w)'    // 10^6
Kilometer := literal='(?:kilomet(?:er|re)s?|km)(?!\w)'i            // 10^3
Hectometer := literal='(?:hectomet(?:er|re)s?|hm)(?!\w)'i          // 10^2
Decameter := literal='(?:decamet(?:er|re)s?|dam)(?!\w)'i           // 10^1
Meter := literal='m(?:et(?:er|re)s?)?(?!\w)'i                      // 1 (base unit)
Decimeter := literal='(?:decimet(?:er|re)s?|dm)(?!\w)'i            // 10^-1
Centimeter := literal='(?:centimet(?:er|re)s?|cm)(?!\w)'i          // 10^-2
Millimeter := literal={'millimet(?:er|re)s?'i | 'mm'} '(?!\w)'     // 10^-3
Micrometer := literal='(?:micro(?:n|met(?:er|re)s?)|μm|um)(?!\w)'i // 10^-6
Nanometer := literal='(?:nanomet(?:er|re)s?|nm)(?!\w)'i            // 10^-9
Picometer := literal={'picomet(?:er|re)s?'i | 'pm'} '(?!\w)'       // 10^-12
Femtometer := literal='(?:femtomet(?:er|re)s?|fm)(?!\w)'i          // 10^-15
Attometer := literal='(?:attomet(?:er|re)s?|am)(?!\w)'i            // 10^-18
Zeptometer := literal={'zeptomet(?:er|re)s?'i | 'zm'} '(?!\w)'     // 10^-21
Yoctometer := literal={'yoctomet(?:er|re)s?'i | 'ym'} '(?!\w)'     // 10^-24
Rontometer := literal={'rontomet(?:er|re)s?'i | 'rm'} '(?!\w)'     // 10^-27
Quectometer := literal={'quectomet(?:er|re)s?'i | 'qm'} '(?!\w)'   // 10^-30

Angstrom := literal='(?:[aå]ngstr[oö]ms?|Å)(?!\w)'i

LengthUnit := Inch | Foot | Yard | Mile | Meter
            | Decameter | Hectometer | Kilometer | Megameter | Gigameter | Terameter | Petameter | Exameter | Zettameter | Yottameter | Ronnameter | Quettameter
            | Decimeter | Centimeter | Millimeter | Micrometer | Nanometer | Picometer | Femtometer | Attometer | Zeptometer | Yoctometer | Rontometer | Quectometer
            | Angstrom


Unit := DataStorageUnit | LengthUnit | TimeUnit
